using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using MongoDB.Bson;
using MongoDB.Bson.Serialization;
using MongoDB.Driver;

namespace MongoDBOperations
{
    /// <summary>
    /// MongoDB静态辅助类，提供简化的接口
    /// </summary>
    public static class MongoDBHelper
    {
        private static MongoDBWrapper _wrapper;

        /// <summary>
        /// 初始化MongoDB辅助类
        /// </summary>
        public static void Initialize(string connectionString, string databaseName, ILogger logger)
        {
            _wrapper = new MongoDBWrapper(connectionString, databaseName, logger);
        }

        /// <summary>
        /// 插入文档
        /// </summary>
        public static async Task<bool> InsertAsync<T>(T document, string collectionName = null) where T : class
        {
            EnsureInitialized();
            string id = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            BsonDocument bsonDoc = document.ToBsonDocument();

            var result = await _wrapper.InsertDocument(id, collection, bsonDoc);
            return result["Inserted"].AsBoolean;
        }

        /// <summary>
        /// 根据ID查找文档
        /// </summary>
        public static async Task<T> FindByIdAsync<T>(string id, string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            BsonDocument filter = new BsonDocument("_id", new ObjectId(id));

            var result = await _wrapper.FindDocument(taskId, collection, filter);
            if (result == null || result.ElementCount == 0)
                return null;

            return BsonSerializer.Deserialize<T>(result);
        }

        /// <summary>
        /// 根据条件表达式查找文档
        /// </summary>
        public static async Task<T> FindOneAsync<T>(Expression<Func<T, bool>> predicate, string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            var filter = Builders<T>.Filter.Where(predicate).Render();

            var result = await _wrapper.FindDocument(taskId, collection, filter);
            if (result == null || result.ElementCount == 0)
                return null;

            return BsonSerializer.Deserialize<T>(result);
        }

        /// <summary>
        /// 查找多个文档
        /// </summary>
        public static async Task<List<T>> FindManyAsync<T>(Expression<Func<T, bool>> predicate, string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            var filter = Builders<T>.Filter.Where(predicate).Render();

            var result = await _wrapper.FindManyDocuments(taskId, collection, filter);
            if (result == null || !result.Contains("Documents"))
                return new List<T>();

            List<T> documents = new List<T>();
            foreach (var doc in result["Documents"].AsBsonArray)
            {
                documents.Add(BsonSerializer.Deserialize<T>(doc.AsBsonDocument));
            }
            return documents;
        }

        /// <summary>
        /// 更新文档
        /// </summary>
        public static async Task<UpdateResult> UpdateAsync<T>(Expression<Func<T, bool>> filter, T document, string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            var filterDoc = Builders<T>.Filter.Where(filter).Render();
            BsonDocument updateDoc = document.ToBsonDocument();

            var result = await _wrapper.UpdateDocument(taskId, collection, filterDoc, updateDoc);
            return new UpdateResult
            {
                MatchedCount = result["MatchedCount"].AsInt64,
                ModifiedCount = result["ModifiedCount"].AsInt64
            };
        }

        /// <summary>
        /// 条件更新 - 使用BsonDocument表达式
        /// </summary>
        public static async Task<UpdateResult> ConditionalUpdateAsync<T>(
            BsonDocument filter,
            BsonDocument update,
            string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();

            var result = await _wrapper.ConditionalUpdateDocument(taskId, collection, filter, update);
            return new UpdateResult
            {
                MatchedCount = result["MatchedCount"].AsInt64,
                ModifiedCount = result["ModifiedCount"].AsInt64
            };
        }

        /// <summary>
        /// 查找并更新
        /// </summary>
        public static async Task<T> FindOneAndUpdateAsync<T>(
            Expression<Func<T, bool>> filter,
            T update,
            bool returnUpdated = true,
            string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            var filterDoc = Builders<T>.Filter.Where(filter).Render();
            BsonDocument updateDoc = update.ToBsonDocument();

            var result = await _wrapper.FindOneAndUpdateDocument(
                taskId, collection, filterDoc, updateDoc, returnUpdated);

            if (result == null || result.ElementCount == 0)
                return null;

            return BsonSerializer.Deserialize<T>(result);
        }

        /// <summary>
        /// 删除文档
        /// </summary>
        public static async Task<long> DeleteAsync<T>(Expression<Func<T, bool>> filter, string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            var filterDoc = Builders<T>.Filter.Where(filter).Render();

            var result = await _wrapper.DeleteDocument(taskId, collection, filterDoc);
            return result["DeletedCount"].AsInt64;
        }

        /// <summary>
        /// 如果不存在则插入
        /// </summary>
        public static async Task<bool> InsertIfNotExistsAsync<T>(Expression<Func<T, bool>> filter, T document, string collectionName = null) where T : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();
            var filterDoc = Builders<T>.Filter.Where(filter).Render();
            BsonDocument documentDoc = document.ToBsonDocument();

            var result = await _wrapper.InsertIfNotExists(taskId, collection, filterDoc, documentDoc);
            return result["Inserted"].AsBoolean;
        }

        /// <summary>
        /// 聚合管道操作
        /// </summary>
        public static async Task<List<T>> AggregateAsync<T, TResult>(BsonDocument[] pipeline, string collectionName = null) where T : class where TResult : class
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            string collection = collectionName ?? GetCollectionName<T>();

            var result = await _wrapper.AggregateDocuments(taskId, collection, pipeline);
            if (result == null || !result.Contains("Results"))
                return new List<T>();

            List<T> documents = new List<T>();
            foreach (var doc in result["Results"].AsBsonArray)
            {
                documents.Add(BsonSerializer.Deserialize<T>(doc.AsBsonDocument));
            }
            return documents;
        }

        /// <summary>
        /// 执行原始命令
        /// </summary>
        public static async Task<BsonDocument> RunCommandAsync(BsonDocument command)
        {
            EnsureInitialized();
            string taskId = Guid.NewGuid().ToString();
            return await _wrapper.RunCommand(taskId, command);
        }

        /// <summary>
        /// 带版本检查的保存方法 - 使用原子操作确保并发安全
        /// </summary>
        /// <typeparam name="T">继承自Entity的类型</typeparam>
        /// <param name="entity">要保存的实体</param>
        /// <param name="collectionName">可选的集合名称</param>
        /// <returns>保存结果 - 包含是否成功和可能的错误信息</returns>
        public static async Task<SaveResult> SaveWithVersionCheckAsync<T>(T entity, string collectionName = null)
            where T : Entity
        {
            EnsureInitialized();

            if (entity == null)
                return new SaveResult { Success = false, Message = "实体对象不能为null" };

            string collection = collectionName ?? GetCollectionName<T>();
            string taskId = Guid.NewGuid().ToString();

            try
            {
                // 如果是新实体（没有ID），则直接插入
                if (entity._id == ObjectId.Empty)
                {
                    // 初始化版本为1
                    entity.Version = 1;
                    BsonDocument doc = entity.ToBsonDocument();
                    var result = await _wrapper.InsertDocument(taskId, collection, doc);
                    return new SaveResult
                    {
                        Success = result["Inserted"].AsBoolean,
                        Message = "新实体已创建"
                    };
                }

                // 存在ID，执行原子的查找并更新操作

                // 当前的版本号
                int currentVersion = entity.Version;

                // 递增版本号
                entity.Version = currentVersion + 1;

                // 转换为BSON文档
                BsonDocument updateDoc = entity.ToBsonDocument();

                // 构建查询条件 - 必须匹配ID和版本号
                var filter = new BsonDocument
        {
            { "_id", entity._id },
            { "Version", currentVersion } // 确保版本匹配
        };

                // 根据MongoDB包装器提供的API调整实现
                // 方法一：如果FindOneAndUpdateDocument方法支持options参数
                var result = await _wrapper.FindOneAndUpdateDocument(
                    taskId,
                    collection,
                    filter,
                    updateDoc,
                    returnUpdated: true,  // 返回更新后的文档
                    upsert: false        // 不允许插入新文档
                );

                // 如果结果为null，说明没有匹配的文档（版本不匹配）
                if (result == null || result.ElementCount == 0)
                {
                    // 尝试获取当前数据库中的版本（为了提供更好的错误信息）
                    var currentDoc = await _wrapper.FindDocument(
                        taskId + "-check",
                        collection,
                        new BsonDocument("_id", entity._id)
                    );

                    int dbVersion = currentDoc != null && currentDoc.Contains("Version")
                        ? currentDoc["Version"].AsInt32
                        : -1;

                    string message = dbVersion >= 0
                        ? $"版本冲突：期望版本 {currentVersion}，数据库版本 {dbVersion}"
                        : "实体不存在或版本不匹配";

                    return new SaveResult { Success = false, Message = message };
                }

                // 将结果文档转换回实体对象，更新版本号
                var updatedEntity = BsonSerializer.Deserialize<T>(result);
                entity.Version = updatedEntity.Version;

                return new SaveResult
                {
                    Success = true,
                    Message = "实体已更新，版本: " + entity.Version
                };
            }
            catch (Exception ex)
            {
                return new SaveResult { Success = false, Message = $"保存失败: {ex.Message}" };
            }
        }

        // 辅助方法
        private static string GetCollectionName<T>()
        {
            return typeof(T).Name;
        }

        private static void EnsureInitialized()
        {
            if (_wrapper == null)
            {
                throw new InvalidOperationException("请先调用Initialize方法初始化MongoDBHelper");
            }
        }
    }

    public class UpdateResult
    {
        public long MatchedCount { get; set; }
        public long ModifiedCount { get; set; }
    }

    /// <summary>
    /// 保存结果类
    /// </summary>
    public class SaveResult
    {
        /// <summary>
        /// 是否保存成功
        /// </summary>
        public bool Success { get; set; }

        /// <summary>
        /// 结果消息
        /// </summary>
        public string Message { get; set; }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace ET
{
public sealed partial class NumericConfig : Luban.BeanBase
{
    public NumericConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        GenAdjust = _buf.ReadInt();
        if(_buf.ReadBool()){ DisplayName = _buf.ReadInt(); } else { DisplayName = null; }
        DisplayName_Ref = null;
    }

    public static NumericConfig DeserializeNumericConfig(ByteBuf _buf)
    {
        return new NumericConfig(_buf);
    }

    /// <summary>
    /// 属性Id (1001~9999)<br/>严禁其他表格配数值时直接配置Id!<br/>必须间接配置变量名!
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 0:不生成<br/>1:生成基础+Add+Pct
    /// </summary>
    public readonly int GenAdjust;
    /// <summary>
    /// 显示名
    /// </summary>
    public readonly int? DisplayName;
    public LanguageConfig DisplayName_Ref;
   
    public const int __ID__ = -2047312753;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        DisplayName_Ref = DisplayName!= null ? LanguageConfigCategory.Instance.GetOrDefault(DisplayName.Value) : null;
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "GenAdjust:" + GenAdjust + ","
        + "DisplayName:" + DisplayName + ","
        + "}";
    }
}

}
